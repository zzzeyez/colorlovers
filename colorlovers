#!/usr/bin/env bash
#
# set system colors from colorlovers.com
# requires: jq, wal
#
# author: daniel neemann (@zzzeyez)

cache="${HOME}/.cache/colorlovers"
amount="30"
entry="$((RANDOM%$amount))"
bg="191919"

setup() {
	if [[ "$clean" ]] ; then
		while true; do
			read -p "Are you sure you want to remove the cache? (yes/no) " yn
			case $yn in
				[Yy]* )
					rm -rf "$cache"
					break
				;;
		        [Nn]* )
					exit
				;;
				* )
					echo "Please answer yes or no."
				;;
			esac
		done
		if [[ -z "$quiet" ]] ; then
			echo "$cache removed"
		fi
		if [[ "$notify" ]] ; then
			notify-send "$cache removed"
		fi
		exit
	fi
	if [[ "$list" ]] ; then
		echo 'themes:'
		ls -1 "$cache/themes" | sed -e 's/.json//g'
		printf "\nto load theme:\ncolorlovers -o theme\n"
		exit
	fi
	mkdir -p "$cache"
	mkdir -p "$cache/themes"
	mkdir -p "$cache/previews"
	if [[ -z "$keyword" ]] && [[ -f "$cache/keywords" ]] ; then
		shuf="$(which shuf)"
		if [ -x "$shuf" ] ; then
			keyword="$(cat $cache/keywords | shuf -n 1)"
		fi
	fi
	if [[ -z "$bg_custom" ]] && [[ -f "$cache/bg" ]] ; then
		shuf="$(which shuf)"
		if [ -x "$shuf" ] ; then
			bg="$(cat $cache/bg | shuf -n 1)"
		fi
	fi
}

load() {
	dir="$cache/themes"
	if [[ "$random" ]] ; then
		n_files="$(/bin/ls -1 "$dir" | wc -l | cut -f1)"
		rand_num="$(awk "BEGIN{srand();print int($n_files * rand()) + 1;}")"
		file="$(/bin/ls -1 "$dir" | sed -ne "${rand_num}p")"
	fi
	path="$(cd $dir && echo "$PWD/$file")" # Converts to full path.
	if [[ ! -f "$path" ]] ; then
		echo "$path not found, exiting.."
	fi
}

colorlovers() {
	if [[ -z "$file" ]] ; then
		keyword="$(echo $keyword | sed -e 's/ /+/g')"
		# get colorlovers palette
		url="http://www.colourlovers.com/api/palettes/top&format=json&numResults=$amount&keywords=$keyword"
		json=$(curl -s "$url")
		username=$(echo "$json" | jq ".[$entry] | .userName" | tr -d '"')
		if [[ "$username" = "null" ]] ; then
			echo "no results found - try another search term.  exiting.."
			exit
		fi
		title=$(echo "$json" | jq ".[$entry] | .title" | tr -d '"')
		color1=$(echo "$json" | jq ".[$entry] | .colors | .[0]" | tr -d '"')
		color2=$(echo "$json" | jq ".[$entry] | .colors | .[1]" | tr -d '"')
		color3=$(echo "$json" | jq ".[$entry] | .colors | .[2]" | tr -d '"')
		color4=$(echo "$json" | jq ".[$entry] | .colors | .[3]" | tr -d '"')
		color5=$(echo "$json" | jq ".[$entry] | .colors | .[4]" | tr -d '"')
		image=$(echo "$json" | jq ".[$entry] | .imageUrl" | tr -d '"')
	fi
}

setwal() {
	if [[ "$file" ]] ; then
		wal --theme "$path" -q -n &&
		name="$(echo $file | sed 's/[^a-z0-9A-Z]//g')"
		name="${name%json}"
		echo "$name" > $cache/colorlovers
	else
		bg="$(echo $bg | tr -d '#')"
		dummy="$(echo $bg | head -c 1)"
		if [[ "$dummy" =~ [a-zA-Z] ]] ; then
			light="-light"
			fg="000000"
			gray="dfdfdf"
		else
			fg="fafafa"
			gray="4f4f4f"
		fi
		unset dummy
		# create wal theme
		echo '{
		"wallpaper": "None",
		"alpha": "100",
		"special": { 
		"background": "#'"$bg"'", 
		"foreground": "#'"$fg"'", 
		"cursor": "#'"$fg"'" 
		}, 
		"colors": { 
		"color0": "#'"$bg"'", 
		"color1": "#'"$color1"'", 
		"color2": "#'"$color2"'", 
		"color3": "#'"$color3"'", 
		"color4": "#'"$color4"'", 
		"color5": "#'"$color5"'", 
		"color6": "#'"a0a0a0"'", 
		"color7": "#'"$fg"'", 
		"color8": "#'"$gray"'",
		"color9": "#'"$color1"'", 
		"color10": "#'"$color2"'", 
		"color11": "#'"$color3"'", 
		"color12": "#'"$color4"'", 
		"color13": "#'"$color5"'", 
		"color14": "#'"a0a0a0"'", 
		"color15": "#'"$fg"'" }} ' | jq . > "$cache/colors.json"
		wal --theme "$cache/colors.json" -q -n && rm "$cache/colors.json" &&
		name="$(echo $title | sed 's/[^a-z0-9A-Z]//g')"
		if [[ -f "$cache/previews/$name.png" ]] ; then
			image="$cache/previews/$name.png"
		else
			curl -o "$cache/previews/$name.png" "$image" &>/dev/null
			image="$cache/previews/$name.png"
			convert "$image" -resize 161x161! -quality 100 "$cache/previews/$name.png" && image="$cache/previews/$name.png"
		fi
		if [[ "$keyword" ]] ; then
			if [[ ! -f "$cache/keywords" ]] ; then
				touch "$cache/keywords"
			fi
			query="$(cat $cache/keywords | grep $keyword)"
			if [[ -z "$query" ]] ; then
				echo "$keyword" >> "$cache/keywords"
			fi
			unset query
		fi
		if [[ "$bg_custom" ]] ; then
			if [[ ! -f "$cache/bg" ]] ; then
				touch "$cache/bg"
			fi
			query="$(cat $cache/bg | grep $bg)"
			if [[ -z "$query" ]] ; then
				echo "$bg" >> "$cache/bg"
			fi
			unset query
		fi
		echo "$name$light" > "$cache/colorlovers"
	fi
}

printpalette() {
	if [[ -z "$quiet" ]] ; then
		# color escapes
		RED="\e[31m"
		GRN="\e[32m"
		YLW="\e[33m"
		BLU="\e[34m"
		PUR="\e[35m"
		RST="\e[0m"
		# build the color bars
		BAR="███"
		((LEN = ${#BAR} * 6))
		OUTT="$RED$BAR$GRN$BAR$YLW$BAR$BLU$BAR$PUR$BAR$RST"
		# print it
		if [[ "$file" ]] ; then
			printf "$OUTT\n$name loaded \n"
		else
			printf "$OUTT\n$title by $username\nkeyword: $keyword\n"
		fi
	fi
}

notify() {
	if [[ "$notify" ]] ; then
		if [[ "$save" ]] ; then
			image="$cache/previews/$name.png"
			if [[ -f "$image" ]] ; then
				notify-send -m "colorscheme $name saved" -i "$image"
			else
				notify-send "colorscheme $name saved"
			fi
		elif [[ "$file" ]] ; then
			image="$cache/previews/$name.png"
			if [[ -f "$image" ]] ; then
				notify-send -m "colorscheme $name loaded" -i "$image"
			else
				notify-send "colorscheme $name loaded"
			fi
		elif [[ "$url" ]] ; then
			notify-send -m "$title by $username (keyword: $keyword)" -i "$image"
		fi
	fi
}

walset() {
	if [[ -x "$(command -v wal-set)" ]] ; then
		wal-set
	fi
}

save() {
	name="$(cat $cache/colorlovers)"
	grep -v "wallpaper" "${HOME}/.cache/wal/colors.json" > "$cache/themes/$name.json" &&
	if [[ -z "$quiet" ]] ; then
		echo "colorscheme $name saved."
		echo "to load:"
		echo "wal --theme $name"
	fi
}

help() {
	printf \
"usage: colorlovers [OPTION] [SEARCHTERM]
      [-n] [-s] [-r] [-l] [-q] [-t] [-o theme] [-c] [-h]
       
example: colorlovers spring
         colorlovers -l coffee
         colorlovers -nqr
	 
optional arguments:
  -n                      notify when done (requires notify-send)
  -s                      save colorscheme to ~/.cache/colorlovers
  -r                      load random theme from ~/.cache/colorlovers
  -b [hex color]          custom background color (foreground
                          color chosen appropriately)
  -q                      quiet mode (print nothing)
  -t                      list all themes
  -l [theme]              load theme
  -c                      clear cache (~/.cache/colorlovers)
  -h                      display this help page and exit \n"
}

flags() {
	while getopts nsrb:qtl:ch opt; do
		case $opt in
			n)
			notify="on"
			;;
			s)
			save="on"
			save
			notify
			exit
			;;
			r)
			random="on"
			load
			;;
			b)
			bg_custom="on"
			bg="$OPTARG"
			;;
			q)
			quiet="on"
			;;
			t)
			list="on"
			;;
			l)
			load="on"
			file="$OPTARG.json"
			load
			;;
			c)
			clean="on"
			;;
			h)
			help
			exit
			;;
		esac
	done
	# if no flags are provided, treat as keyword
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ;
	then
		keyword="$@"
	fi
}

if [ "$#" -ne 0 ]; then
	flags "$@"
	setup
	colorlovers &&
	setwal
	walset
	printpalette
	notify
else
	setup
	colorlovers &&
	setwal
	walset
	printpalette
	notify
fi

# todo
#
# line 105 turns light='on' .  possibly useful
# maybe for light themes vs dark themes
